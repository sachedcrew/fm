name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job do uruchamiania testów jednostkowych
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'  # Zaktualizuj wersję, jeśli używasz innej

      - name: Install dependencies
        run: dotnet restore
        working-directory: ./FleetManagmentApp

      - name: Build
        run: dotnet build --no-restore
        working-directory: ./FleetManagmentApp

      - name: Run unit tests
        run: dotnet test --no-build --verbosity normal
        working-directory: ./FleetManagmentApp

  # Job do analizy kodu
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      - name: Install dependencies
        run: dotnet restore
        working-directory: ./FleetManagmentApp

      - name: Run static analysis
        run: dotnet sonarscanner begin /k:"project-key" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" && dotnet build && dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        working-directory: ./FleetManagmentApp

  # Job do lintingu i formatowania frontendu
  linting-formatting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Zaktualizuj wersję Node.js, jeśli używasz innej

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Lint code
        run: npm run lint
        working-directory: ./frontend

      - name: Format code
        run: npm run format
        working-directory: ./frontend

  # Job do sprawdzania Conventional Commits
  conventional-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check commit messages
        run: npx commitlint --from=HEAD~1 --to=HEAD

  # Job do tworzenia dokumentacji i publikowania na GitHub Pages
  docs-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build documentation
        run: npm run docs:build
        working-directory: ./frontend

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/docs/.vitepress/dist

  # Job do deploymentu backendu i frontendu
  deploy:
    runs-on: ubuntu-latest
    needs: [unit-tests, static-analysis, linting-formatting, conventional-commits]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy backend
        run: ./deploy-backend.sh
        env:
          DEPLOYMENT_KEY: ${{ secrets.DEPLOYMENT_KEY }}

      - name: Deploy frontend
        run: ./deploy-frontend.sh
        env:
          DEPLOYMENT_KEY: ${{ secrets.DEPLOYMENT_KEY }}

  # Job do testowania Conventional Commits w PR i commitach
  conventional-commits-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check commit messages
        run: npx commitlint --from=HEAD~1 --to=HEAD
